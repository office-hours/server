package edu.cnm.deepdive.officehours.controller.rest;

import edu.cnm.deepdive.officehours.model.entity.Appointment;
import edu.cnm.deepdive.officehours.model.entity.Teacher;
import edu.cnm.deepdive.officehours.model.entity.User;
import edu.cnm.deepdive.officehours.service.StudentRepository;
import edu.cnm.deepdive.officehours.service.TeacherRepository;
import edu.cnm.deepdive.officehours.service.UserRepository;
import java.util.UUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

/**
 * Designates REST endpoints for http requests on {@link Teacher} entity fields, using {@link
 * TeacherRepository} methods as the medium.
 */
@RestController
@RequestMapping("/teachers")
@ExposesResourceFor(Teacher.class)
public class TeacherController {

  private final TeacherRepository teacherRepository;
  private final UserRepository userRepository;

  /**
   * Initializes this instance, injecting an instance of {@link TeacherRepository}, and {@link
   * StudentRepository}.
   *
   * @param teacherRepository repository used to implement methods on the {@link Teacher} entity.
   * @param userRepository    repository used to implement methods on the {@link User} entity.
   */
  @Autowired
  public TeacherController(TeacherRepository teacherRepository,
      UserRepository userRepository) {
    this.teacherRepository = teacherRepository;
    this.userRepository = userRepository;
  }

  /**
   * Adds a new instance of {@link Teacher} to the database and returns an instance that include the
   * autogenerated fields such as timestamps, id. The instance provided has to contain a valid
   * userId from the {@link User} entity,
   *
   * @param teacher fields that are non-nullable on the {@link Teacher} class.
   * @return the created {@link Teacher} instance.
   */
  @ResponseStatus(HttpStatus.CREATED)
  @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
  public Teacher post(@RequestBody Teacher teacher) {
    User user = userRepository.findOrFail(teacher.getUser().getId());
    teacher.setUser(user);
    teacherRepository.save(teacher);
    return teacher;
  }

  /**
   * This invokes a query of all of the all the teachers in the database.
   *
   * @return a list of all instances of {@link Teacher} in the database.
   */
  @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
  public Iterable<Teacher> getTeacherByName() {
    return teacherRepository.getAllByOrderByTeacherName();
  }

  /**
   * Returns the instance of {@link Teacher} that are matches the provided Id.
   *
   * @param id UUID of the {@link Teacher} instance.
   * @return fetched {@link Teacher} instance.
   */
  @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
  public Teacher get(@PathVariable UUID id) {
    return teacherRepository.findById(id).get();
  }

  /**
   * Updates the Status of the {@link Teacher} instance, fetched by the provide Id, with the
   * provided parameters.
   *
   * @param id UUID of the {@link Teacher} instance.
   * @return updated {@link Teacher} instance.
   */
  @PutMapping(value = "/{id}",
      consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
  public Teacher put(@PathVariable UUID id, @RequestBody Teacher updated) {
    Teacher teacher = get(id);
    teacher.setTeacherName(updated.getTeacherName());
    return teacherRepository.save(teacher);
  }

  /**
   * Will be able to get an instances of teacher/teachers that are connected to appointments without
   * returning all of the appointments
   *
   * @param id referring  to the id of the teacher.
   * @return teachers that have appointments, with out a full appointment.
   */
  @GetMapping(value = "/{id}/appointments")
  public Iterable<Appointment> getAppointments(@PathVariable UUID id) {
    return teacherRepository.findOrFail(id).getAppointment();
  }
}
