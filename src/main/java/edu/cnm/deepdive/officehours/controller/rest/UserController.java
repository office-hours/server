package edu.cnm.deepdive.officehours.controller.rest;

import edu.cnm.deepdive.officehours.model.entity.Appointment;
import edu.cnm.deepdive.officehours.model.entity.Student;
import edu.cnm.deepdive.officehours.model.entity.Teacher;
import edu.cnm.deepdive.officehours.model.entity.User;
import edu.cnm.deepdive.officehours.model.repository.UserRepository;
import java.util.UUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Designates REST endpoints for http requests on {@link User} entity fields, using {@link
 * UserRepository} operations as the medium.
 */
@RestController
@RequestMapping("/users")
@ExposesResourceFor(User.class)
public class UserController {

  private final UserRepository repository;

  /**
   * Initializes this instance, injecting an instance of {@link UserRepository}.
   *
   * @param repository used to implement operations on the {@link User} entity.
   */
  @Autowired
  public UserController(UserRepository repository) {
    this.repository = repository;
  }

  /**
   * Adds a new instance of {@link Appointment} to the database and returns an instance that include
   * the autogenerated fields such as timestamps, id. The instance provided has to contain a
   * nickname, oauth token, and email for this instance.
   *
   * @param user field that are non-nullable on the {@link User} class.
   * @return URL reference for the {@link User} instance.
   */
  @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE,
      produces = MediaType.APPLICATION_JSON_VALUE)
  public ResponseEntity<User> post(@RequestBody User user) {
    Student student = user.getStudent();
    Teacher teacher = user.getTeacher();
    if (student != null && teacher != null) {
      throw new IllegalArgumentException();
    }
    if (student != null) {
      student.setUser(user);
    } else if (teacher != null) {
      teacher.setUser(user);
    }
    repository.save(user);
    return ResponseEntity.created(user.getHref()).body(user);
  }

  /**
   * Returns all of the instance of {@link User} that are on the database ordered by the redundant
   * id.
   *
   * @return a list of all instances of {@link User} in the database.
   */
  @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
  public Iterable<User> get() {
    return repository.findAllByOrderById();
  }


  /**
   * Returns the instance of {@link User} that matches the provided Id.
   *
   * @param id UUID of the {@link User} instance.
   * @return fetched {@link User} instance.
   */
  @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
  public User get(@PathVariable UUID id) {
    return repository.findById(id).get();
  }

  /**
   * Updates the email of the {@link User} instance, fetched by the provided Id, with the provided
   * parameters.
   *
   * @param id      UUID of the {@link User} instance.
   * @param updated partial {@link User} instance containing the parameters to be modified.
   * @return updated {@link User} instance.
   */
  @PutMapping(value = "/{id}",
      consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
  public User put(@PathVariable UUID id, @RequestBody User updated) {
    User user = get(id);
    user.setEmail(updated.getEmail());
    return repository.save(user);
  }

}
